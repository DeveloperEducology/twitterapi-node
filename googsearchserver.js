// Import necessary modules
require('dotenv').config();
const express = require('express');
const axios = require('axios');

// --- Centralized Configuration ---
const config = {
    PORT: process.env.PORT || 3000,
    SERPER_API_URL: 'https://google.serper.dev/search',
    GEMINI_API_URL: `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${process.env.GEMINI_API_KEY}`,
    // SOURCES_TO_USE is no longer needed as we are fetching all sources.
};

// Initialize Express app
const app = express();

// Middleware to parse JSON request bodies
app.use(express.json());


/**
 * Queries the Serper.dev API to get search results for a given topic.
 * @param {string} query - The topic to search for.
 * @returns {Promise<{context: string, sources: Array<{title: string, link: string, snippet: string, rank: number, publishedDate: string|null}>}|null>} An object containing the context and all sources, or null if not found.
 */
async function getSearchContext(query) {
    const SERPER_API_KEY = process.env.SERPER_API_KEY;
    if (!SERPER_API_KEY) {
        throw new Error('SERPER_API_KEY is not defined in your .env file.');
    }
    
    console.log(`[Serper] üîç Searching for: "${query}"`);
    
    const payload = JSON.stringify({ "q": query });

    try {
        const response = await axios.post(config.SERPER_API_URL, payload, {
            headers: {
                'X-API-KEY': SERPER_API_KEY,
                'Content-Type': 'application/json'
            }
        });

        const organicResults = response.data.organic;

        if (!organicResults || organicResults.length === 0) {
            console.log('[Serper] üì™ No organic results found.');
            return null;
        }
        
        // --- IMPROVEMENT: Map ALL sources and add rank and published date ---
        const sources = organicResults.map(item => ({
            title: item.title,
            link: item.link,
            snippet: item.snippet,
            rank: item.position, // Add the organic rank
            publishedDate: item.date || null // Add the published date, fallback to null
        }));

        // Create a single context string from all the snippets
        const context = sources.map(s => s.snippet).join(' ... ').replace(/\n/g, '');
        
        console.log(`[Serper] üìù Context created from ${sources.length} sources.`);
        
        return { context, sources };

    } catch (error) {
        console.error('[Serper] Error fetching search results:', error.response ? error.response.data : error.message);
        throw new Error('Failed to retrieve context from Serper API.');
    }
}


/**
 * Generates a news article using the Gemini API based on the provided context.
 * @param {string} context - The context string from search results.
 * @returns {Promise<string>} The generated news article text.
 */
async function generateNewsArticle(context) {
    const prompt = `Based on the following information: "${context}". Please act as a professional news editor. Write a news article in Telugu with a suitable, compelling title. The article body must be a single paragraph and should not exceed 65 words.`;

    const payload = {
        contents: [{ parts: [{ text: prompt }] }],
        generationConfig: {
            temperature: 0.7,
            topK: 1,
            topP: 1,
            maxOutputTokens: 256,
        },
    };

    try {
        console.log('[Gemini] üß† Generating news article...');
        const response = await axios.post(config.GEMINI_API_URL, payload);
        
        if (response.data.candidates && response.data.candidates.length > 0) {
            console.log('[Gemini] ‚úÖ Article generated successfully.');
            return response.data.candidates[0].content.parts[0].text;
        }
        throw new Error('No content generated by the model.');

    } catch (error) {
        console.error('[Gemini] Error generating article:', error.response ? error.response.data : error.message);
        throw new Error('Failed to generate news article with Gemini API.');
    }
}


// --- API Endpoint ---
app.get('/generate-news', async (req, res) => {
    const topic = req.query.topic?.trim();

    if (!topic) {
        return res.status(400).json({ error: 'A "topic" query parameter is required.' });
    }

    console.log(`\n----------------------------------------`);
    console.log(`[Request] Received job for topic: ${topic}`);

    try {
        const searchResult = await getSearchContext(topic);

        if (!searchResult || searchResult.sources.length === 0) {
            return res.status(404).json({ error: 'Could not find any relevant information on the topic.' });
        }
        
        const newsArticle = await generateNewsArticle(searchResult.context);
        
        res.status(200).json({
            topic: topic,
            newsArticle: newsArticle,
            sources: searchResult.sources 
        });

    } catch (error) {
        console.error(`[Request] Failed job for topic "${topic}":`, error.message);
        res.status(500).json({ 
            error: 'An internal server error occurred.',
            details: error.message
        });
    }
});


// Start the server
app.listen(config.PORT, () => {
    console.log(`‚úÖ News API server is running on http://localhost:${config.PORT}`);
    console.log(`üîó Make requests to: http://localhost:${config.PORT}/generate-news?topic=your_topic`);
});